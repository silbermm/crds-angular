<!--Documentation: http://msdn.microsoft.com/en-us/library/ff660914%28v=pandp.20%29.aspx -->
<unity xmlns="http://schemas.microsoft.com/practices/2010/unity">
  <assembly name="crds-angular" />
  <assembly name="Crossroads.AsyncJobs" />
  <assembly name="Crossroads.Utilities" />
  <assembly name="MinistryPlatform.Translation" />
  <assembly name="RestSharp" />
  <assembly name="System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
  <assembly name="System.Security.Cryptography" />

  <container>
    <!-- Main Job Processor - add to the "processors" array below as new job processors are added -->
    <register type="Crossroads.AsyncJobs.Application.JobProcessor">
      <lifetime type="ContainerControlledLifetimeManager" />
      <constructor>
        <param name="processors">
          <array>
            <dependency name="stripeEventQueueProcessor"/>
            <dependency name="checkScannerBatchQueueProcessor"/>
            <dependency name="tripEventQueueProcessor"/>
            <dependency name="signupToServeQueueProcessor" />
          </array>
        </param>
      </constructor>
    </register>

    <!-- Message Queue Factory -->
    <register name="messageQueueFactory" type="Crossroads.Utilities.Messaging.Interfaces.IMessageQueueFactory" mapTo="Crossroads.Utilities.Messaging.MessageQueueFactory"/>

    <!-- Stripe Event queue processor -->
    <register name="stripeEventQueueProcessor" type="Crossroads.AsyncJobs.Application.IQueueProcessor" mapTo="Crossroads.AsyncJobs.Application.QueueProcessor[[crds_angular.Models.Crossroads.Stewardship.StripeEvent]]">
      <lifetime type="ContainerControlledLifetimeManager" />
      <constructor>
        <param name="queueProcessorConfig">
          <dependency name="stripeEventQueueProcessorConfig"/>
        </param>
        <param name="messageQueueFactory">
          <dependency name="messageQueueFactory"/>
        </param>
      </constructor>
    </register>
    <register name="stripeEventQueueProcessorConfig" type="Crossroads.AsyncJobs.Models.QueueProcessorConfig[[crds_angular.Models.Crossroads.Stewardship.StripeEvent]]">
      <lifetime type="ContainerControlledLifetimeManager" />
      <property name="QueueName" value=".\Private$\StripeEvents" />
      <property name="JobExecutor">
        <dependency name="stripeEventProcessor" />
      </property>
    </register>
    <register name="stripeEventProcessor" type="Crossroads.AsyncJobs.Interfaces.IJobExecutor[[crds_angular.Models.Crossroads.Stewardship.StripeEvent]]" mapTo="Crossroads.AsyncJobs.Processors.StripeEventProcessor">
      <lifetime type="ContainerControlledLifetimeManager" />
      <constructor>
        <param name="stripeEventService">
          <dependency name="stripeEventService" />
        </param>
      </constructor>
    </register>
    <register name="stripeEventService" type="crds_angular.Services.Interfaces.IStripeEventService" mapTo="crds_angular.Services.StripeEventService">
      <lifetime type="ContainerControlledLifetimeManager" />
      <constructor>
        <param name="paymentService" />
        <param name="donationService" />
        <param name="donorService" />
        <param name="mpDonorService" />
        <param name="configuration">
          <dependency type="Crossroads.Utilities.Interfaces.IConfigurationWrapper"/>
        </param>
      </constructor>
    </register>

    <!-- Check scanner batch processor -->
    <register name="checkScannerBatchQueueProcessor" type="Crossroads.AsyncJobs.Application.IQueueProcessor" mapTo="Crossroads.AsyncJobs.Application.QueueProcessor[[crds_angular.Models.Crossroads.Stewardship.CheckScannerBatch]]">
      <lifetime type="ContainerControlledLifetimeManager" />
      <constructor>
        <param name="queueProcessorConfig">
          <dependency name="checkScannerBatchQueueProcessorConfig"/>
        </param>
        <param name="messageQueueFactory">
          <dependency name="messageQueueFactory"/>
        </param>
      </constructor>
    </register>
    <register name="checkScannerBatchQueueProcessorConfig" type="Crossroads.AsyncJobs.Models.QueueProcessorConfig[[crds_angular.Models.Crossroads.Stewardship.CheckScannerBatch]]">
      <lifetime type="ContainerControlledLifetimeManager" />
      <property name="QueueName" value=".\Private$\CheckScannerDonations" />
      <property name="JobExecutor">
        <dependency name="checkScannerBatchProcessor" />
      </property>
    </register>
    <register name="checkScannerBatchProcessor" type="Crossroads.AsyncJobs.Interfaces.IJobExecutor[[crds_angular.Models.Crossroads.Stewardship.CheckScannerBatch]]" mapTo="Crossroads.AsyncJobs.Processors.CheckScannerBatchProcessor">
      <lifetime type="ContainerControlledLifetimeManager" />
      <constructor>
        <param name="checkScannerService" />
        <param name="emailService" />
        <param name="configuration" />
      </constructor>
    </register>
    <register type="crds_angular.Services.Interfaces.ICheckScannerService" mapTo="crds_angular.Services.EzScanCheckScannerService">
      <lifetime type="PerResolveLifetimeManager"/>
      <constructor>
        <param name="checkScannerDao"/>
        <param name="donorService" />
        <param name="paymentService" />
        <param name="mpDonorService" />
      </constructor>
    </register>

    <!-- SignupToServe queue processor-->
    <register name="signupToServeQueueProcessor" type="Crossroads.AsyncJobs.Application.IQueueProcessor" mapTo="Crossroads.AsyncJobs.Application.QueueProcessor[[crds_angular.Models.Crossroads.Serve.SaveRsvpDto]]">
      <lifetime type="ContainerControlledLifetimeManager" />
      <constructor>
        <param name="queueProcessorConfig">
          <dependency name="signupToServeQueueProcessorConfig"/>
        </param>
        <param name="messageQueueFactory">
          <dependency name="messageQueueFactory"/>
        </param>
      </constructor>
    </register>
    <register name="signupToServeQueueProcessorConfig" type="Crossroads.AsyncJobs.Models.QueueProcessorConfig[[crds_angular.Models.Crossroads.Serve.SaveRsvpDto]]">
      <lifetime type="ContainerControlledLifetimeManager" />
      <property name="QueueName" value=".\Private$\SignupToServeEvents" />
      <property name="JobExecutor">
        <dependency name="signupToServeEventProcessor" />
      </property>
    </register>
    <register name="signupToServeEventProcessor" type="Crossroads.AsyncJobs.Interfaces.IJobExecutor[[crds_angular.Models.Crossroads.Serve.SaveRsvpDto]]" mapTo="Crossroads.AsyncJobs.Processors.SignupToServeProcessor" >
      <lifetime type="ContainerControlledLifetimeManager" />
      <constructor>
        <param name="serveService">
          <dependency name="serveService"/>
        </param>
        <param name="configurationWrapper" />
        <param name="authenticationService" />
      </constructor>
    </register>
    <register name="serveService" type="crds_angular.Services.Interfaces.IServeService" mapTo="crds_angular.Services.ServeService">
      <lifetime type="ContainerControlledLifetimeManager" />
      <constructor>
        <param name="contactService" />
        <param name="contactRelationshipService" />
        <param name="opportunityService" />
        <param name="eventService" />
        <param name="participantService" />
        <param name="groupParticipantService" />
        <param name="groupService" />
        <param name="communicationService" />
        <param name="authenticationService" />
        <param name="configurationWrapper" />
        <param name="apiUserService" />
        <param name="responseService" />
      </constructor>
    </register>

    <!-- Trip Event queue processor -->
    <register name="tripEventQueueProcessor" type="Crossroads.AsyncJobs.Application.IQueueProcessor" mapTo="Crossroads.AsyncJobs.Application.QueueProcessor[[crds_angular.Models.Crossroads.Trip.TripApplicationDto]]">
      <lifetime type="ContainerControlledLifetimeManager" />
      <constructor>
        <param name="queueProcessorConfig">
          <dependency name="tripEventQueueProcessorConfig"/>
        </param>
        <param name="messageQueueFactory">
          <dependency name="messageQueueFactory"/>
        </param>
      </constructor>
    </register>
    <register name="tripEventQueueProcessorConfig" type="Crossroads.AsyncJobs.Models.QueueProcessorConfig[[crds_angular.Models.Crossroads.Trip.TripApplicationDto]]">
      <lifetime type="ContainerControlledLifetimeManager" />
      <property name="QueueName" value=".\Private$\TripEvents" />
      <property name="JobExecutor">
        <dependency name="tripEventProcessor" />
      </property>
    </register>
    <register name="tripEventProcessor" type="Crossroads.AsyncJobs.Interfaces.IJobExecutor[[crds_angular.Models.Crossroads.Trip.TripApplicationDto]]" mapTo="Crossroads.AsyncJobs.Processors.TripEventProcessor">
      <lifetime type="ContainerControlledLifetimeManager" />
        <constructor>
          <param name="tripService">
            <dependency name="tripService"/>
          </param>
        </constructor>
    </register>
    <register name="tripService" type="crds_angular.Services.Interfaces.ITripService" mapTo="crds_angular.Services.TripService">
      <lifetime type="ContainerControlledLifetimeManager" />
      <constructor>
        <param name="eventParticipant"/>
        <param name="donationService"/>
        <param name="groupService"/>
        <param name="formSubmissionService"/>
        <param name="eventService"/>
        <param name="donorService"/>
        <param name="pledgeService"/>
        <param name="campaignService"/>
        <param name="privateInviteService"/>
        <param name="communicationService"/>
        <param name="contactService"/>
        <param name="contactRelationshipService" />
        <param name="configurationWrapper"/>
        <param name="personService"/>
        <param name="serveService"/>
        <param name="destinationService" />
      </constructor>
    </register>

    <!-- Data Access -->
    <register type="crds_angular.DataAccess.Interfaces.ICheckScannerDao" mapTo="crds_angular.DataAccess.EzScanCheckScannerDao">
      <lifetime type="PerResolveLifetimeManager"/>
      <constructor>
        <param name="dbConnection" dependencyName="ezScanDbConnection" />
      </constructor>
    </register>
    <register name="ezScanDbConnection" type="System.Data.IDbConnection" mapTo="System.Data.SqlClient.SqlConnection">
      <lifetime type="PerResolveLifetimeManager"/>
      <constructor></constructor>
      <property name="ConnectionString">
        <value value="EZSCAN_DB_CONN_STRING"
               typeConverter="Crossroads.Utilities.Services.EnvironmentVariableTypeConverter" />
      </property>
    </register>

    <!-- crds_angular Services -->
    <register type="crds_angular.Services.Interfaces.IAttributeService" mapTo="crds_angular.Services.AttributeService" />
    <register type="crds_angular.Services.Interfaces.IBulkEmailSyncService" mapTo="crds_angular.Services.BulkEmailSyncService" />
    <register type="crds_angular.Services.Interfaces.IContactAttributeService" mapTo="crds_angular.Services.ContactAttributeService" />
    <register type="crds_angular.Services.Interfaces.IDonationService" mapTo="crds_angular.Services.DonationService" />
    <register type="crds_angular.Services.Interfaces.IDonorService" mapTo="crds_angular.Services.DonorService" />
    <register type="crds_angular.Services.Interfaces.IDonorStatementService" mapTo="crds_angular.Services.DonorStatementService" />
    <register type="crds_angular.Services.Interfaces.IEmailCommunication" mapTo="crds_angular.Services.EmailCommunication" />
    <register type="crds_angular.Services.Interfaces.IPersonService" mapTo="crds_angular.Services.PersonService" />
    <register type="crds_angular.Services.Interfaces.IServeService" mapTo="crds_angular.Services.ServeService" />
    <register type="crds_angular.Services.Interfaces.ICongregationService" mapTo="crds_angular.Services.CongregationService" />
    <register type="crds_angular.Services.Interfaces.IRoomService" mapTo="crds_angular.Services.RoomService" />
    <register type="crds_angular.Services.Interfaces.IStaffContactService" mapTo="crds_angular.Services.StaffContactService" />
    <register type="crds_angular.Services.Interfaces.IEquipmentService" mapTo="crds_angular.Services.EquipmentService" />
    
    
    <!--Ministry Platform Translation Services-->
    <register type="MinistryPlatform.Translation.Services.Interfaces.IAttributeService" mapTo="MinistryPlatform.Translation.Services.AttributeService" />
    <register type="MinistryPlatform.Translation.Services.Interfaces.IAuthenticationService" mapTo="MinistryPlatform.Translation.Services.AuthenticationServiceImpl" />
    <register type="MinistryPlatform.Translation.Services.Interfaces.ICampaignService" mapTo="MinistryPlatform.Translation.Services.CampaignService"/>
    <register type="MinistryPlatform.Translation.Services.Interfaces.ICommunicationService" mapTo="MinistryPlatform.Translation.Services.CommunicationService" />
    <register type="MinistryPlatform.Translation.Services.Interfaces.IContactAttributeService" mapTo="MinistryPlatform.Translation.Services.ContactAttributeService" />
    <register type="MinistryPlatform.Translation.Services.Interfaces.IContactService" mapTo="MinistryPlatform.Translation.Services.ContactService" />
    <register type="MinistryPlatform.Translation.Services.Interfaces.IContactRelationshipService" mapTo="MinistryPlatform.Translation.Services.ContactRelationshipService" />
    <register type="MinistryPlatform.Translation.Services.Interfaces.IDestinationService" mapTo="MinistryPlatform.Translation.Services.DestinationService" />
    <register type="MinistryPlatform.Translation.Services.Interfaces.IUserService" mapTo="MinistryPlatform.Translation.Services.UserService" />
    <register type="MinistryPlatform.Translation.Services.Interfaces.IDonationService" mapTo="MinistryPlatform.Translation.Services.DonationService" />
    <register type="MinistryPlatform.Translation.Services.Interfaces.IDonorService" mapTo="MinistryPlatform.Translation.Services.DonorService" />
    <register type="MinistryPlatform.Translation.Services.Interfaces.IEventParticipantService" mapTo="MinistryPlatform.Translation.Services.EventParticipantService" />
    <register type="MinistryPlatform.Translation.Services.Interfaces.IEventService" mapTo="MinistryPlatform.Translation.Services.EventService" />
    <register type="MinistryPlatform.Translation.Services.Interfaces.IFormSubmissionService" mapTo="MinistryPlatform.Translation.Services.FormSubmissionService">
      <constructor>
        <param name="ministryPlatformService">
          <dependency type="MinistryPlatform.Translation.Services.Interfaces.IMinistryPlatformService"/>
        </param>
        <param name="dbConnection">
          <value value="MinistryPlatformDatabase"
                 typeConverter="MinistryPlatform.Translation.Utils.DbConnectionNameTypeConverter" />
        </param>
        <param name="authenticationService">
          <dependency type="MinistryPlatform.Translation.Services.Interfaces.IAuthenticationService"/>
        </param>
        <param name="configurationWrapper">
          <dependency type="Crossroads.Utilities.Interfaces.IConfigurationWrapper"/>
        </param>
      </constructor>
    </register>
    <register type="MinistryPlatform.Translation.Services.Interfaces.IGroupService" mapTo="MinistryPlatform.Translation.Services.GroupService" />
    <register type="MinistryPlatform.Translation.Services.Interfaces.IGroupParticipantService" mapTo="MinistryPlatform.Translation.Services.GroupParticipantService">
      <constructor>
        <param name="dbConnection">
          <value value="MinistryPlatformDatabase"
                 typeConverter="MinistryPlatform.Translation.Utils.DbConnectionNameTypeConverter" />
        </param>
        <param name="configurationWrapper">
          <dependency type="Crossroads.Utilities.Interfaces.IConfigurationWrapper"/>
        </param>
        <param name="ministryPlatformService">
          <dependency type="MinistryPlatform.Translation.Services.Interfaces.IMinistryPlatformService"/>
        </param>
        <param name="apiUserService">
          <dependency type="MinistryPlatform.Translation.Services.Interfaces.IApiUserService"/>
        </param>
      </constructor>
    </register>

    <register type="MinistryPlatform.Translation.Services.Interfaces.IApiUserService" mapTo="MinistryPlatform.Translation.Services.ApiUserService" />
    <register type="MinistryPlatform.Translation.Services.Interfaces.IBulkEmailRepository" mapTo="MinistryPlatform.Translation.Services.BulkEmailRepository" />
    <register type="MinistryPlatform.Translation.Services.Interfaces.IMinistryPlatformService" mapTo="MinistryPlatform.Translation.Services.MinistryPlatformServiceImpl" />
    <register type="MinistryPlatform.Translation.Services.Interfaces.IOpportunityService" mapTo="MinistryPlatform.Translation.Services.OpportunityServiceImpl" />
    <register type="MinistryPlatform.Translation.Services.Interfaces.IParticipantService" mapTo="MinistryPlatform.Translation.Services.ParticipantService" />
    <register type="MinistryPlatform.Translation.Services.Interfaces.IPledgeService" mapTo="MinistryPlatform.Translation.Services.PledgeService" />
    <register type="MinistryPlatform.Translation.Services.Interfaces.IProgramService" mapTo="MinistryPlatform.Translation.Services.ProgramService" />
    <register type="MinistryPlatform.Translation.Services.Interfaces.IPrivateInviteService" mapTo="MinistryPlatform.Translation.Services.PrivateInviteService"/>
    <register type="MinistryPlatform.Translation.Services.Interfaces.IResponseService" mapTo="MinistryPlatform.Translation.Services.ResponseService" />
    <register type="MinistryPlatform.Translation.Services.Interfaces.ICongregationService" mapTo="MinistryPlatform.Translation.Services.CongregationService" />
    <register type="MinistryPlatform.Translation.Services.Interfaces.IRoomService" mapTo="MinistryPlatform.Translation.Services.RoomService" />
    <register type="MinistryPlatform.Translation.Services.Interfaces.IEquipmentService" mapTo="MinistryPlatform.Translation.Services.EquipmentService" />
    <register type="MinistryPlatform.Translation.Services.Interfaces.ILookupService" mapTo="MinistryPlatform.Translation.Services.LookupService" />

    <!-- Configuration Wrapper -->
    <register type="Crossroads.Utilities.Interfaces.IConfigurationWrapper" mapTo="Crossroads.Utilities.Services.ConfigurationWrapper" />

    <!-- 3DES Encryption Provider -->
    <register type="Crossroads.Utilities.Interfaces.ICryptoProvider"
              mapTo="Crossroads.Utilities.Services.TripleDesSymmetricKeyCryptoProvider">
      <constructor>
        <param name="base64EncodedKey">
          <value value="EZSCAN_DB_SECRET_KEY" typeConverter="Crossroads.Utilities.Services.EnvironmentVariableTypeConverter" />
        </param>
        <param name="cipherMode">
          <value value="ECB" typeConverter="Crossroads.Utilities.Services.EnumTypeConverter[System.Security.Cryptography.CipherMode]" />
        </param>
        <param name="paddingMode">
          <value value="PKCS7" typeConverter="Crossroads.Utilities.Services.EnumTypeConverter[System.Security.Cryptography.PaddingMode]"/>
        </param>
      </constructor>
    </register>

    <!-- Content Block Service (for CMS messages) -->
    <register type="Crossroads.Utilities.Interfaces.IContentBlockService"
              mapTo="Crossroads.Utilities.Services.ContentBlockService">
      <lifetime type="ContainerControlledLifetimeManager"/>
      <constructor>
        <param name="cmsRestClient">
          <dependency name="cmsRestClient"/>
        </param>
      </constructor>
    </register>
    <register name="cmsRestClient" type="RestSharp.IRestClient" mapTo="RestSharp.RestClient">
      <constructor>
        <param name="baseUrl" type="string">
          <value value="CRDS_CMS_ENDPOINT" typeConverter="Crossroads.Utilities.Services.EnvironmentVariableTypeConverter" />
        </param>
      </constructor>
    </register>

    <register type="crds_angular.Services.Interfaces.IPaymentService" mapTo="crds_angular.Services.StripeService">
      <constructor>
        <param name="stripeRestClient">
          <dependency name="stripeRestClient" />
        </param>
        <param name="configuration">
          <dependency type="Crossroads.Utilities.Interfaces.IConfigurationWrapper"/>
        </param>
        <param name="contentBlockService">
          <dependency type="Crossroads.Utilities.Interfaces.IContentBlockService"/>
        </param>
      </constructor>
    </register>

    <register name="stripeRestClient" type="RestSharp.IRestClient" mapTo="RestSharp.RestClient">
      <constructor>
        <param name="baseUrl" type="string">
          <value value="PaymentClient" typeConverter="Crossroads.Utilities.Services.AppSettingsTypeConverter" />
        </param>
      </constructor>
      <property name="Authenticator">
        <dependency name="stripeAuthenticator" />
      </property>
    </register>
    <register name="stripeAuthenticator" type="RestSharp.IAuthenticator" mapTo="RestSharp.HttpBasicAuthenticator">
      <constructor>
        <param name="username">
          <value value="STRIPE_AUTH_TOKEN"
                 typeConverter="Crossroads.Utilities.Services.EnvironmentVariableTypeConverter" />
        </param>
        <!-- TODO I really need to set this to null, but Unity doesn't like that, so sending spaces for now -->
        <param name="password" value="  " />
      </constructor>
    </register>

    <!-- Register a per-resolve MP PlatformServiceClient -->
    <register type="MinistryPlatform.Translation.PlatformService.PlatformServiceClient">
      <lifetime type="PerResolveLifetimeManager" />
      <constructor></constructor>
    </register>
  </container>
</unity>
